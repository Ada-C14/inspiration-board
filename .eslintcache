[{"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/index.js":"1","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/App.js":"2","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/registerServiceWorker.js":"3","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/Board.js":"4","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/Card.js":"5","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/NewCardForm.js":"6"},{"size":254,"mtime":1610171467247,"results":"7","hashOfConfig":"8"},{"size":445,"mtime":1610183775200,"results":"9","hashOfConfig":"8"},{"size":4384,"mtime":1610171467248,"results":"10","hashOfConfig":"8"},{"size":3813,"mtime":1610195970107,"results":"11","hashOfConfig":"8"},{"size":739,"mtime":1610185940372,"results":"12","hashOfConfig":"8"},{"size":3504,"mtime":1610195912604,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"2180e0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/index.js",[],["31","32"],"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/App.js",[],"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/registerServiceWorker.js",[],"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/Board.js",["33"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n// import CARD_DATA from '../data/card-data.json';\n\nconst Board = (props) => {\n\n  const [cardsList, setCardsList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [allBoards, updateBoards] = useState([]);\n\n  const BASE_URL = props.url;\n  const CARDS_URL = props.url.replace('boards', 'cards')\n  // useEffect to get cards\n  useEffect(() => {\n    axios.get(`${BASE_URL}${props.boardName}/cards`)\n      .then( (response) => {\n        // get list of cards\n        const apiCardsList = response.data;\n        setCardsList(apiCardsList);\n      })\n      .catch( (error) => {\n        setErrorMessage(['Failed to retrieve cards.']);\n        console.log(error.message);\n      });\n      \n    axios.get(BASE_URL)\n      .then( (response) => {\n        // get list of boards\n        const apiBoardsList = response.data;\n        updateBoards(apiBoardsList);\n      })\n      .catch( (error) => {\n        setErrorMessage(['Failed to retrieve boards.']);\n        console.log(error.message);\n      });\n  },[]);\n\n  // add a card to cardsList \n  const addCard = (card) => {\n    const newCardList  = [...cardsList];\n    const post = {text: card.text, emoji: card.emoji}\n    axios.post(`${BASE_URL}${card.boardName}/cards`, post)\n    .then( (response) => {\n      // only add card to board if the post is for this particular board\n      if(card.boardName === props.boardName) {\n        const newId = response.data.card.id;\n    \n        newCardList.push({\n          card: {\n            id: newId,\n            text: card.text, \n            emoji: card.emoji,\n          }  \n        })\n      }\n      setCardsList(newCardList);\n    })\n    .catch( (error) => {\n      setErrorMessage(['Failed to add card.']);\n      console.log(error.message);\n    });\n\n\n  }\n\n  // delete a card from cardsList\n  const deleteCard = (id) => {\n    let newCardsList = [];\n    for (const item of cardsList) {\n      // cardsList is pulled from the API, meaning anything in cardsList should ideally have a matching id\n      if(id === item.card.id) {\n        axios.delete(`${CARDS_URL}/${id}`)\n          // if successful, deleted, send confirmation to console\n          .then((response) => {\n            console.log(`Card ${id} successfully deleted`);\n          })\n          .catch((error) => {\n            // don't add the card back in -- likely this card was deleted from the api after components mounted\n            setErrorMessage([`Could not delete card ${id}.`]);\n          });\n      } else {\n        newCardsList.push(item);\n      }\n    }\n\n    setCardsList(newCardsList);\n  }\n\n  // for API data ONLY \n  const allCards = (cards, deleteCard) => {\n    \n    let cardsList = [];\n\n    for(const item of cards) {\n      cardsList.push(<Card id = {item.card.id} text={item.card.text} emojiText={item.card.emoji} deleteCard = {deleteCard}/>);\n    }\n    return cardsList;\n  }\n\n  // for error message\n  const allErrors = (errorData) => {\n    const errors = [];\n    for(const error of errorData) {\n      errors.push(<li>{error}</li>);\n    }\n\n    return errors;\n  }\n\n  return (\n    <div>\n      <article className = 'validation-errors-display'>\n        <ul className = 'validation-errors-display__list'>\n            {errorMessage ? allErrors(errorMessage) : ''}\n        </ul>\n      </article> \n      <NewCardForm url = {CARDS_URL} boardName = {props.boardName} addCard = {addCard} boards = {allBoards}/>\n      <section className = 'board'>\n        {allCards(cardsList, deleteCard)}\n      </section>\n    </div>\n  )\n};\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n};\n\nexport default Board;\n","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/Card.js",["34"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nconst Card = (props) => {\n  const removeCard = () => {\n    props.deleteCard(props.id);\n  }\n\n  return (\n    <div className=\"card\">\n      <button className = \"card__delete\" onClick = {removeCard}> delete</button>\n      <section className = \"card__content\">\n        <h2 className = \"card__content-text\">{props.text}</h2>\n        <p className = \"card__content-emoji\">{props.emojiText ? emoji.getUnicode(props.emojiText) : ''}</p>\n      </section>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  text: PropTypes.string, \n  emoji: PropTypes.string,\n  deleteCard: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/NewCardForm.js",["35"],"import React, { Component, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = emoji.names;\n\nconst NewCardForm = (props) => {\n\n    const [formData, updateFormData] = useState({text: '', emoji: '', boardName: props.boardName})\n\n    // lifting this from exquisite react for responsive text area\n    const onFieldChange = (event) => {\n        const newFormData = {...formData};\n        newFormData[event.target.name] = event.target.value;\n        updateFormData(newFormData);\n    }\n\n    // for drop-down emoji options\n    \n    const emojiList = (emojis) => {\n        let emojiSelect = []\n\n        for( const emojiText of emojis) {\n            emojiSelect.push(<option value = {emojiText}> {emojiText}</option>);\n        }\n\n        return (<select id = 'emoji'\n                name = 'emoji' \n                value = {formData.emoji}\n                className = 'new-card-form__form-select' \n                onChange = {onFieldChange}> {emojiSelect} </select>);\n    }\n\n        // for drop-down board options\n    \n    const boardList = (boards) => {\n        let boardSelect = []\n    \n        for( const item of boards) {\n            // add own board to top of list\n            if (item.board.name !== props.boardName) {\n                boardSelect.push(<option value = {item.board.name}>{item.board.name} {item.board.name === formData.boardName ? '(selected board)' : ''}</option>);\n            }\n        }\n        \n        boardSelect.unshift(<option value = {props.boardName}> {props.boardName} (current board)</option>);\n\n        return(<select id = 'boardName'\n                    name = 'boardName'\n                    value = {formData.boardName}\n                    className = 'new-card-form__form-select'\n                    onChange = {onFieldChange}> {boardSelect} </select>);\n    }\n    \n    // for submit button \n    const onSubmit = (event) => {\n        event.preventDefault();\n\n        props.addCard(formData);\n\n        updateFormData({text: '', emoji: '', boardName: props.boardName});\n    }\n\n    return (\n        <section className = 'new-card-form' onSubmit = {onSubmit}>\n            <h2 className = 'new-card-form__header'>add a card</h2>\n            <form className = 'new-card-form__form'>\n\n                <label className = 'new-card-form__form-label'>text</label>\n                <textarea id = 'text'\n                        name = 'text' \n                        value = {formData.text}\n                        placeholder = \"inspire your board or someone else's!\"\n                        className = 'new-card-form__form-textarea' \n                        onChange = {onFieldChange}></textarea>\n\n                <label className = 'new-card-form__form-label'>{emoji ? emoji.getUnicode(formData.emoji) : ''} emoji</label>\n                {emojiList(EMOJI_LIST)}\n\n                <label className = 'new-card-form__form-label'>board</label>\n                {boardList(props.boards)}\n\n                <input type='submit' value = 'submit card' className = 'new-card-form__form-button' />\n            </form>\n        </section>\n    );\n}\n\nNewCardForm.propTypes = {\n    url: PropTypes.string.isRequired,\n    boardName: PropTypes.string.isRequired,\n    addCard: PropTypes.func.isRequired,\n    boards: PropTypes.arrayOf(PropTypes.shape({board: PropTypes.shape(\n        {id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired}\n    )})).isRequired\n};\n\nexport default NewCardForm;",["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":41,"column":5,"nodeType":"44","endLine":41,"endColumn":7,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":17,"nodeType":"48","messageId":"49","endLine":1,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":1,"column":17,"nodeType":"48","messageId":"49","endLine":1,"endColumn":26},{"ruleId":"38","replacedBy":"50"},{"ruleId":"40","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'BASE_URL' and 'props.boardName'. Either include them or remove the dependency array.","ArrayExpression",["54"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [BASE_URL, props.boardName]",{"range":"57","text":"58"},[1224,1226],"[BASE_URL, props.boardName]"]