[{"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/index.js":"1","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/App.js":"2","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/registerServiceWorker.js":"3","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/Board.js":"4","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/Card.js":"5","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/NewCardForm.js":"6","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/BoardList.js":"7"},{"size":254,"mtime":1610171467247,"results":"8","hashOfConfig":"9"},{"size":445,"mtime":1610312659103,"results":"10","hashOfConfig":"9"},{"size":4384,"mtime":1610171467248,"results":"11","hashOfConfig":"9"},{"size":4336,"mtime":1610317741524,"results":"12","hashOfConfig":"9"},{"size":739,"mtime":1610185940372,"results":"13","hashOfConfig":"9"},{"size":3649,"mtime":1610237189817,"results":"14","hashOfConfig":"9"},{"size":1515,"mtime":1610237437203,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"2180e0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/index.js",[],["34","35"],"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/App.js",[],"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/registerServiceWorker.js",[],"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/Board.js",[],"/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/Card.js",["36"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nconst Card = (props) => {\n  const removeCard = () => {\n    props.deleteCard(props.id);\n  }\n\n  return (\n    <div className=\"card\">\n      <button className = \"card__delete\" onClick = {removeCard}> delete</button>\n      <section className = \"card__content\">\n        <h2 className = \"card__content-text\">{props.text}</h2>\n        <p className = \"card__content-emoji\">{props.emojiText ? emoji.getUnicode(props.emojiText) : ''}</p>\n      </section>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  text: PropTypes.string, \n  emoji: PropTypes.string,\n  deleteCard: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/NewCardForm.js",["37"],"import React, { Component, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = emoji.names;\n\nconst NewCardForm = (props) => {\n\n    const [formData, updateFormData] = useState({text: '', emoji: '', boardName: props.boardName})\n\n    // lifting this from exquisite react for responsive text area\n    const onFieldChange = (event) => {\n        const newFormData = {...formData};\n        newFormData[event.target.name] = event.target.value;\n        updateFormData(newFormData);\n    }\n\n    // for drop-down emoji options\n    \n    const emojiList = (emojis) => {\n        let emojiSelect = []\n\n        for( const emojiText of emojis) {\n            emojiSelect.push(<option key = {emojiText} value = {emojiText}> {emojiText}</option>);\n        }\n\n        emojiSelect.unshift(<option key = 'empty' value = ''> NONE </option>);\n        return (<select id = 'emoji'\n                name = 'emoji' \n                value = {formData.emoji}\n                className = 'new-card-form__form-select' \n                onChange = {onFieldChange}> {emojiSelect} </select>);\n    }\n\n        // for drop-down board options\n    \n    const boardList = (boards) => {\n        let boardSelect = []\n    \n        for( const item of boards) {\n            // add own board to top of list\n            if (item.board.name !== props.boardName) {\n                boardSelect.push(<option key = {item.board.name} value = {item.board.name}>{item.board.name} {item.board.name === formData.boardName ? '(selected board)' : ''}</option>);\n            }\n        }\n        \n        boardSelect.unshift(<option key = {props.boardName} value = {props.boardName}> {props.boardName} (current board)</option>);\n\n        return(<select id = 'boardName'\n                    name = 'boardName'\n                    value = {formData.boardName}\n                    className = 'new-card-form__form-select'\n                    onChange = {onFieldChange}> {boardSelect} </select>);\n    }\n    \n    // for submit button \n    const onSubmit = (event) => {\n        event.preventDefault();\n\n        props.addCard(formData);\n\n        updateFormData({text: '', emoji: '', boardName: props.boardName});\n    }\n\n    return (\n        <section className = 'new-card-form' onSubmit = {onSubmit}>\n            <h2 className = 'new-card-form__header'>add a card</h2>\n            <form className = 'new-card-form__form'>\n\n                <label className = 'new-card-form__form-label'>text</label>\n                <textarea id = 'text'\n                        name = 'text' \n                        value = {formData.text}\n                        placeholder = \"inspire your board or someone else's!\"\n                        className = 'new-card-form__form-textarea' \n                        onChange = {onFieldChange}></textarea>\n\n                <label className = 'new-card-form__form-label'>{emoji ? emoji.getUnicode(formData.emoji) : ''} emoji</label>\n                {emojiList(EMOJI_LIST)}\n\n                <label className = 'new-card-form__form-label'>board</label>\n                {boardList(props.boards)}\n\n                <input type='submit' value = 'submit card' className = 'new-card-form__form-button' />\n            </form>\n        </section>\n    );\n}\n\nNewCardForm.propTypes = {\n    url: PropTypes.string.isRequired,\n    boardName: PropTypes.string.isRequired,\n    addCard: PropTypes.func.isRequired,\n    boards: PropTypes.arrayOf(PropTypes.shape({board: PropTypes.shape(\n        {id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired}\n    )})).isRequired\n};\n\nexport default NewCardForm;","/Users/ada/Desktop/AdaCoursework/Week18/inspiration-board/src/components/BoardList.js",["38"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './BoardList.css';\n\nconst BoardList = (props) => {\n\n    const onBoardChange = (event) => {\n        props.changeCurrentBoard(event.target.value);\n    }\n\n    const boardSelect = (boards) => {\n\n        let boardOptions = []\n    \n        for( const item of boards) {\n            if(item.board.name !== props.currentBoard) {\n                boardOptions.push(<option key = {item.board.name} value = {item.board.name}>{item.board.name}</option>);\n            }\n        }\n\n        boardOptions.unshift(<option key = {props.currentBoard} value = {props.currentBoard}>{props.currentBoard} (current board)</option>)\n        \n        return(<select id = 'boardName'\n                    name = 'boardName'\n                    value = {props.currentBoard}\n                    className = 'board-list__div-select' \n                    onChange = {onBoardChange}> {boardOptions} </select>);\n    }\nreturn (\n    <div className = 'board-list'>\n        <h2 className = 'board-list__header'>view board</h2>\n        <div className = 'board-list__div'>\n            {boardSelect(props.boards)}\n        </div>\n    </div>\n);\n}\n\nBoardList.propTypes = {\n    currentBoard: PropTypes.string.isRequired,\n    changeCurrentBoard: PropTypes.func.isRequired,\n    boards: PropTypes.arrayOf(PropTypes.shape({board: PropTypes.shape(\n        {id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired}\n    )})).isRequired\n};\n\nexport default BoardList;",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":26},{"ruleId":"43","severity":1,"message":"44","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":26},{"ruleId":"43","severity":1,"message":"44","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":26},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]